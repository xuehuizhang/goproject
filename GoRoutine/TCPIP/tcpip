1，协议
    应用层   HTTP
    传输层   TCP/IP

2, 网络分层模型
    OSI/RM 7层模型                  TCP/IP四层模型
         应用层
         表示层                     应用层
         会话层
         传输层                     传输层
         网络层                     网络层
         数据链路层
         物理层                     链路层

3，TCP/IP分层模型 对应的协议
    1，链路层  ARP/RARP（ARP作用：借助IP寻找Mac）
    2，网络层  IP (IP)
    3，传输层  Port  TCP/UDP   Port用于找应用（进程）
    4，应用层  FTP/Http 或者自定义

4，各层功能
    1，链路层   ARP
        源mac-----目标mac
        ARP协议：借助IP获取Mac地址  寻找网卡
    2，网络层   IP协议
        源IP---目标IP
        IP协议的作用：在网路环境中唯一标识一台主机
        IP地址本质：点分十进制IP地址
    3，传输层 TCP/UDP
        TCP/UDP协议的主要作用：封装端口
        Port: 在主机上唯一标识一个进程
    4，应用层 FTP/Http
        发送数据：指定IP+Port
        对数据封装/解封装
5，数据传输实例
    数据包封装过程：应用---传输---网络---链路
    1，封装应用层协议  数据                                    用户层
    ----------------------------------------------------------------------
    2，封装传输层协议  TCP/UDP 指定端口号 标识主机上一个进程   内核层（往下）
    3，封装网络层协议  IP   唯一标识网络一台主机
    4，封装链路层协议  ARP  获取Mac地址

    网卡-->路由器-->网卡

    数据包解封过程：链路---网路---传输---应用
    1，链路层解封   拿到IP
    2，网络层解封   拿到端口
    3，传输层解封   拿到HTTP/FTP协议
    4，应用层解封   拿到数据

6，总结通信过程
    1，mac地址：不需要用户指定   (Arp协议)ip--mac
    2，ip地址：需要用户指定   确定主机
    3，端口号：需要用户指定  确定进程
        1，端口号不能使用系统占用的默认端口  5000+ （8080）
        2，端口上限  65535
    4，根据IP寻找Mac地址过程
        ARP请求包（源mac 目的mac(未知) 源ip 目的ip）---广播---
        ARP响应包（源mac(已知) 目的mac 源ip 目的ip）

7，socket特性
    1，网络通信过程中，socket一定是成对出现
    2， 双向半双工   对讲机
    3， 双向全双工   电话   socket(实现：两个channel 一个接口)
    4， 单工通信     遥控器

8，网络应用设计模式
    1，B/S
    2，C/S

9，TCP的C/S架构
    1，先建立连接
        三次握手 内核中完成
        1，SYN 2000(0)           主动发起连接请求
        2，ACK 2001,SYN 8000(0)
        3，ACK 8001
        服务器：Accept()完成
        客户端：Dial()完成   代表三次握手完成

        通信过程：
        read
        write   应用层
        --------------
                内核层

        四次挥手断开连接：
            1，主动关闭一方发送  FIN  ACK
            2，被动一方应答  ACK
                出现半关闭
            3，被动方变成主动关闭方继续发送数据  FIN
            4，原主动方发送数据  ACK
         为啥建立连接三次，断开连接四次？  半关闭

    2，架构模式
                           阻塞等待用户链接  net.Listen()
                 net.Dial()----------------->Accept()
                            数据请求
                 Write()--------------------->Read()
                            数据应答                处理请求
                 Read()<----------------------Write()

                 Close()                       Close()

     3，代码演练
        1，单线程版服务器
        2，并发版服务器
        3，服务器判断关闭：
            服务器：read返回0  客户端关闭
            nc发送命令 结尾默认\n
            win系统下发送命令  结尾会多\r\n

9.1 TCP通信过程总结
    1，三次握手
        1，主动发起请求端，发送SYN
        2，被动建立连接请求端，应答ACK,发送SYN
        3，主动发起请求端，发送应答ACK
        标志TCP三次握手建立完成   ----server:Accept()返回   ---client:Dail()返回
    2，四次挥手
        1，主动关闭连接请求端 发送FIN
        2，被动关闭连接请求端 发送ACK
                                        标志，半关闭完成  ----close()
        3，被动关闭连接请求端 发送FIN
        4，主动关闭连接请求端 发送ACK
                                        标志，四次挥手建立完成  ----close()

10，UDP的C/S架构
    1，不先建立连接

11，IP相关
    1，公网ip
    2，NAT映射表（路由器）
    3，路由器--->交换机

12，TCP状态转换
    1，主动发起连接请求端：CLOSED---->完成三次握手-----ESTABLISHED(数据通信状态)----Dial()函数返回
    2，被动发起连接请求端：CLOSED---->调用Accept()函数---->LISTEN-----完成三次握手---ESTABLISHED(数据通信状态)-----Accept()函数返回
        数据传递期间-----ESTABLISHED(数据通信状态)
    3，主动关闭连接请求端：
        ESTABLISHED---->FIN_WAIT_2(半关闭)-----TIME_WAIT-----2MSL---确认最后一个ACK被对端成功接收----CLOSE
        半关闭，TIME_WAIT,2MSL只会出现在 主动关闭连接请求端
    4，被动关闭连接请求端
        ESTABLISHED---->CLOSE

    win: netstat -an | findstr 8001
    linux: netstat -apn | grep 8001